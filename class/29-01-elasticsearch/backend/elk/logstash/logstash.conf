input{
    jdbc{
        ##### 1단계 #####  => 매번 똑같은 데이터를 계속 가지고옴
        # jdbc_driver_library => "Mysql-Connector-java-8.0.28.jar"
        # jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        # jdbc_connection_string => "jdbc:mysql://my-database:3306/mydocker09"
        # jdbc_user => "root"
        # jdbc_password => "root"   # 여기까지 하면 연결됨. 
        # schedule => "* * * * *"   #  1. 마우스 키보드로입력해서 특정 API실행 / 크론텝? 2. 특정시간에 자동으로 API실행 
        # statement => "select * from product" # sql명령어 실행해서 가져온 데이터가 아웃풋에 들어감/ 
  


        #### 2단계 #####  => 시간의 소수점이 잘리는 문제 발생
        # jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
        # jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        # jdbc_connection_string => "jdbc:mysql://my-database:3306/mydocker09"
        # jdbc_user => "root"
        # jdbc_password => "root"
        # schedule => "* * * * *"
        # use_column_value => true  # 컬럼을 사용하실 건가요? 트루
        # tracking_column => "updatedat" # 업데이트 된 것을 aaa파일에 담겠다
        # tracking_column_type => "timestamp"  # 데이터 타입 : 시간
        # last_run_metadata_path => "./aaa.txt"  마지막에 실행될 결과를 저장해주세요
        # statement => "select id, name, description, price, updatedat from product where updatedat > :sql_last_value order by updatedat asc"


         ##### 3단계 방식 ##### 시간으 숫자로 비교할것임 한번폴링한것을 두번이상 폴링하지 않게 하기
        jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_connection_string => "jdbc:mysql://my-database:3306/mydocker09"
        jdbc_user => "root"
        jdbc_password => "root"
        schedule => "* * * * *"
        use_column_value => true
        tracking_column => "updatedat"
        tracking_column_type => "numeric"
        last_run_metadata_path => "./aaa.txt"
        statement => "select id, name, description, price, unix_timestamp(updatedat) as updatedat from product where unix_timestamp(updatedat) > :sql_last_value order by updatedat asc"
				}
}
# asc 최신게 아래  desc 최신게 위에
# unix_timestamp() 날짜를숫자로 바꿔주는 기능


output{
    elasticsearch {
        hosts => "elasticsearch:9200"
        index => "myproduct09"
        # index => "myproduct_new"

    }
}
