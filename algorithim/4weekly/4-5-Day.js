// 최대공약수와 최소공배수
// 문제 설명
// 두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수, solution을 완성해 보세요. 배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다. 예를 들어 두 수 3, 12의 최대공약수는 3, 최소공배수는 12이므로 solution(3, 12)는 [3, 12]를 반환해야 합니다.

// 제한 사항
// 두 수는 1이상 1000000이하의 자연수입니다.
// 입출력 예
// n	m	return
// 3	12	[3, 12]
// 2	5	[1, 10]

// [1]
function solution(n, m) {
    // 최대공약수 : 두수의 공통되는 약수 중에서 가장 큰수
    // 최대공배수 : 두수의 공통되는 배수중에서 가장 작은수
    // 최대공약수 구하기
    let max = 0; // 공약수 중에서 가장 큰수만 저장
    for (let i = 1; i <= m; i++) {
        // console.log(i,n%i, m%i)
        if (n % i === 0 && m % i === 0) {
            // console.log(i,n%i, m%i)
            max = i;
        }
    }
    // 최소공배수 구하기
    let min = 0; // 공배수 중에서 가장 작은수만 저장
    for (let i = m; i <= m * n; i += m) {
        // console.log(i%n)
        if (i % n === 0) {
            // console.log(i, n, i%n)
            min = i;
            break;
        }
    }
    return [max, min];
}

// [2]

function solution(n, m) {
    // 유클리드 호재법
    // -최대공약수를 구하기 위한 알고리즘공식

    //1. a를 b로 나누었을때(a>b, 큰수를 더 작은 수로 나누었을때 )
    //2. 나머지 값이 0이되면 더작은 수(b)가 최대공약수가 된다.
    //3. 나머지 값이 0이되지 않으면 작은 수 (b)가 큰수(a)가 되고
    //4. 나머지 값이 작은수(b) 가된다
    // 위 과정을 계속 반복한다.

    let a = m; // 큰수
    let b = n; // 작은수
    let r = 0; // a를 b로 나눴을 때 나머지 값이 할당
    while (a % b > 0) {
        r = a % b; // 큰수에 더 작은 수를 다시 할당
        a = b; // 큰 수에는 나눴을 때의 더 작은수를 할당
        b = r; // 작은ㅊ수에는 나머지 값에 할당
    }
    // 최대공배수는 두 수를 곱한 수에 최대공약수를 나눠준 몫의 값
    // console.log(a, b)
    return [b, (n * m) / b];
}

solution(3, 12); //[3, 12]
solution(2, 5); //[1, 10]
